function [ output_args ] = batch_test_feature_select( wave_files_names, wave_files_path  )
%BATCH_TEST_FEATURE_SELECT Summary of this function goes here
%   Detailed explanation goes here
%BATCH_TEST_SEMI Summary of this function goes here
%   Detailed explanation goes here

Para.lambda = 0.8;
Para.beta = 0.5;
ALg_types = { 'mrmr', 'MCFS', 'two_step_fs'};
for ii = 1: length(wave_files_names)
    fprintf('%s\n', wave_files_names(ii).name);
    for jj = 1 : length(ALg_types)
        fprintf('%s\n', ALg_types{jj});
        kk = 10:20:150;
        %kk = 100;
    % try

       temp = wave_files_names(ii).name;
       file_name = strcat('F:\稀疏表示实验结果\img\', temp(1:3));
       %file_name = file_name(1:length(file_name);
           file_path = strcat(wave_files_path, wave_files_names(ii).name);
           load(file_path);
           %[ prs] = test_feature_selection( fea, gnd, ALg_types{jj}, kk);
           %[ prs, pstds] = locate_dimension_reduction( fea, gnd, ALg_types{jj}, kk);
%             X = fea;
%             Y = gnd;
            X = x';
            Y = t';
            if min(Y) == 0
                Y = Y + 1;
            end
            D = size(X, 2);
           if D > 200
               kk = 10:20:400;
           else
               step = floor(D/15);
               kk = 10 : step : floor(D /2) - 1;
           end
           [ prs, pstds] = test_feature_select( X, Y, ALg_types{jj}, kk, Para);
           %prs = prs(1:1,:);
           prs = [prs, pstds];
           for aa = 1 : size(prs, 1)
               fprintf('alg%d:', aa);
               for bb = 1 : size(prs, 2)
                   fprintf(' %f', prs(aa, bb));
               end
               fprintf('\n', aa);
           end
%         catch
%          prs = [];
%         end
% %         
%         save_path = strcat(save_dir, ALg_types{jj}, wave_files_names(ii).name);
%         save(save_path, 'prs');
    end
end

end

function [ prs, pstds] = test_feature_select( X, L, alg_type, sel_dims, Para)

%classifier_type = {'SVM', 'NN', 'knn', 'fknn', 'hknn', 'LMC', 'lpc', 'alh', 'RLMC'};
%classifier_type = {'SVM', 'NN', 'tradition_src',  'tradition_src_un_norm', 'knn', 'LMC', 'CGMC'};
classifier_type = {'NN',  'SVM', 'CGMC2'};

random_times = 10;

X = NormalizeFea(X);
[ X ] = sun_norm_by_mean_std( X );
pall = zeros(length(classifier_type) * 2 , random_times, length(sel_dims) + 1);
for ii = 1 : random_times
    l = 6;
    ul = 3;
    us = 30;
    %[train, semitrain, test] = get_l_ul_us_inx_num(L, l, ul, us);
    [train, semitrain, test] = get_l_ul_us_inx_ratio(L,0.8, 0.1);
    XLTrain = X(train, :);
    LTrain = L(train);
    XULTrain = X(semitrain, :);
    XTest = X(test, :);
    LTest = L(test);

%     
   [FeaIndex,FeaNumCandi, cLbest ] = feature_sel_batch_main( XLTrain, LTrain, sel_dims, alg_type, Para );
    for jj = 1 : length(FeaIndex)
        XLTrain1 = XLTrain(:, FeaIndex{jj});
        XTest1 = XTest(:, FeaIndex{jj});   
        XULTrain1 = XULTrain(:, FeaIndex{jj});  

%         XLTrain1 = XLTrain;
%         XULTrain1 = XULTrain;
%         XTest1 = XTest;
        %原始空间分类
        for kk = 1 : length(classifier_type);
            pall(kk, ii, jj) = classifier_main( XLTrain1, XTest1, LTrain, LTest, classifier_type{kk});
        end
          %感知空间分类
        [XTest2] = GCMDistance(XTest1, XLTrain1, LTrain);
        [XLTrain2] = GCMDistance(XLTrain1, XLTrain1, LTrain);
%         [B,IX] = sort(XTest2, 2);
%         tttt=sum(B(:, 1:2 * K + 1));
%         cc(2) = max(tttt)/min(tttt);
        for kk = 1 : length(classifier_type);
            pall(kk+length(classifier_type), ii, jj) = classifier_main( XLTrain2, XTest2, LTrain, LTest, classifier_type{kk});
        end
        
        
    end
end
pii = zeros(random_times, length(sel_dims) + 1);
prs = [];
pstds = [];
for ii = 1 : size(pall, 1)
    pii(:, :) = pall(ii, :, :);
    p1s = std(pii, 0, 1);
    p1 = mean(pii, 1);
    p1(length(sel_dims) + 1) = max(p1);
    [~, inxxx] = max(p1);
    p1s(length(sel_dims) + 1) = p1s(inxxx);
    prs = [prs;p1];
    pstds = [pstds;p1s];
end
end

